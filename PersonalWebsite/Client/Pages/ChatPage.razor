@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable


<svg width="3em" height="3em" viewBox="0 0 16 16" class="bi bi-chat" fill="currentColor">
    <path fill-rule="evenodd" d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z" />
</svg>
<h3> Live Chat</h3>

<img src="/Images/chat.png" alt="chat" style="float:right;width:200px;height:200px;">

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
    <button @onclick="Send" disabled="@(!Isconnected)">Send</button>
</div>
<footer id="copyR"> &copy; Obaidi Site 2020</footer>

<hr />
<ul id="messageList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>
<style>
    header {
        font-family: "Candara";
        font-size: 22px;
        text-align: left;
        background-color: #CDAA3A;
    }

    body {
        background-color: #61BDC7;
    }

    footer {
        position: fixed;
        bottom: 0;
        right: 0;
    }
</style>

@code{
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput, messageInput;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private Task Send()
    {
        return hubConnection.SendAsync("SendMessage", userInput, messageInput);
    }

    public bool Isconnected
    {
        get
        {
            return hubConnection.State == HubConnectionState.Connected;
        }
    }
    public void Dispose()
    {

    }
}